use base64::{engine::general_purpose::STANDARD, Engine};
use libaes::Cipher;
use regex;
use reqwest;
use scraper::{ElementRef, Html, Selector};
use serde_json::{self, Value};
use text_io::read;

fn encrypt(plain: &str) -> String {
    let iv: [u8; 16] = [0, 2, 7, 3, 5, 3, 8, 0, 0, 117, 110, 105, 118, 84, 77, 87];
    let key = b"zbcd1efghi4jklm2nopq5rstu3vw6xya";
    let cipher = Cipher::new_256(key);

    let out = cipher.cbc_encrypt(&iv, plain.as_bytes());
    STANDARD.encode(out).replace("+", "~univ~")
}

#[tokio::main(flavor = "current_thread")]
async fn main() {
    let title = "ÎãπÏã†Ïùò Ïù¥Î¶Ñ ÎòêÎäî ÎãâÎÑ§ÏûÑÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî.";
    let test_title = [
        "ÏûÖÏÇ¨ ÌõÑ Îß°Í≤å Îêú Ï≤´ ÌîÑÎ°úÏ†ùÌä∏! Î≠êÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÎ©¥ Ï¢ãÏùÑÍπå?",
        "Ïò§ÎûúÎßåÏóê ÎßåÎÇú ÏûÖÏÇ¨ ÎèôÍ∏∞, ÌûòÎì§Îã§Í≥† Í≥†ÎØº ÏÉÅÎã¥ÏùÑ ÌïúÎã§Î©¥?",
        "ÎÇòÎäî Ïù¥Îü∞ ÏÇ¨ÎûåÏù¥Í≥† Ïã∂Ïñ¥! ÌåÄ ÎÇ¥ÏóêÏÑú Îß°Í≥† Ïã∂ÏùÄ Ìè¨ÏßÄÏÖòÏùÄ?",
        "ÌîÑÎ°úÏ†ùÌä∏Î•º ÏßÑÌñâÌïòÎ©¥ÏÑú Ïñ¥Î†§ÏõÄÏóê Ï≤òÌñàÎã§Î©¥!? Ïñ¥ÎñªÍ≤å ÌïòÎäî Í≤å Ï¢ãÏùÑÍπå?",
        "ÎìúÎîîÏñ¥ Ï∞æÏïÑÏò® Ï£ºÎßê, Ïñ¥ÎñªÍ≤å ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©¥ Ï¢ãÏùÑÍπå?",
        "Ïã†ÏÇ¨ÏóÖ ÏïÑÏù¥ÎîîÏñ¥ ÌöåÏùò, ÏûêÎ£åÎ•º Ïñ¥ÎñªÍ≤å Ï§ÄÎπÑÌï¥Ïïº Ìï†Íπå?",
        "ÏûÖÏÇ¨Ìïú ÏßÄ Ïñ¥ÎäêÎçß 1ÎÖÑ! ÎèåÏïÑÎ≥¥Î©¥ Î¨¥ÏóáÏù¥ Í∞ÄÏû• ÎøåÎìØÌï†Íπå?",
        "Í∏âÌûà Î≥¥Í≥†ÏÑúÎ•º ÎßàÎ¨¥Î¶¨Ìï¥Ïïº ÌïòÎäîÎç∞, ÌÉÄÌåÄÏóêÏÑú ÏóÖÎ¨¥ ÌòëÏ°∞ ÏöîÏ≤≠Ïù¥ ÏôîÎã§Î©¥?",
        "ÏïÑÏù¥ÎîîÏñ¥ ÌöåÏùò Ï§ë, ÌåÄÏõêÎì§ Í∞ÑÏùò ÏùòÍ≤¨Ïù¥ Î∂ÑÎ∂ÑÌïòÎã§Î©¥?",
    ];
    let form_label = [
        "Ïù¥Í±∞Î∂ÄÌÑ∞ Ìï¥ÏïºÍ≤†ÎÑ§!Ìï† Ïàò ÏûàÎäî ÏùºÎ∂ÄÌÑ∞ Ï∞®Í∑ºÏ∞®Í∑º Ìï¥Î≥¥Í∏∞",
        "Ìïú ÏπòÏùò Ïò§Ï∞®ÎèÑ ÏóÜÍ≤å! Ìï¥Ïïº Ìï† ÏóÖÎ¨¥ Î¶¨Ïä§Ìä∏ÏóÖ, Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÎßåÎì§Í∏∞",
        "ÎßéÏù¥ ÌûòÎì§ÏóàÍ≤†Íµ¨ÎÇò‚Ä¶ Í≥µÍ∞êÌï¥ Ï£ºÍ≥† Îî∞ÎìØÌïòÍ≤å ÏúÑÎ°úÌï¥ Ï£ºÍ∏∞",
        "ÏïÑÌïò, Ïôú ÌûòÎì§ÏóàÎäîÎç∞? Ïù¥Ïú†Î•º Îì§Ïñ¥Î≥¥Í≥† Ìï¥Í≤∞Ï±Ö Ï†úÏãúÌï¥Ï£ºÍ∏∞",
        "Î¨µÎ¨µÌïòÍ≥† ÍººÍººÌïòÍ≤å Îß°ÏùÄ ÏóÖÎ¨¥Î•º Ìï¥ÎÇ¥Îäî ÏÇ¨Îûå",
        "Ïú†Ïó∞ÌïòÍ≤å ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥Î•º Ï†úÏãúÌïòÎäî ÏÇ¨Îûå",
        "Îã§ Ïù¥Î†áÍ≤å ÏÑ±Ïû•ÌïòÎäî Í±∞ÏßÄ~ Í∏çÏ†ïÏ†ÅÏúºÎ°ú ÎßàÏù∏Îìú ÏÖã ÌïòÎ©∞ ÎèôÎ£åÏóêÍ≤å ÎèÑÏõÄ ÏöîÏ≤≠ÌïòÍ∏∞",
        "Ïñ¥Îñ§ Î∂ÄÎ∂ÑÏù¥ Î¨∏Ï†úÏòÄÏùÑÍπå? Í≥∞Í≥∞Ïù¥ ÏÉùÍ∞ÅÌï¥ Î≥¥Î©¥ÏÑú ÏÉÅÏÇ¨ÏóêÍ≤å ÏûêÎ¨∏Íµ¨ÌïòÍ∏∞",
        "Î¨¥Í≥ÑÌöçÏù¥ Í≥ÑÌöç! Ïßë Í∑ºÏ≤òÏóêÏÑú Î∞úÍ∏∏ ÎãøÎäî ÎåÄÎ°ú Íµ¨Í≤ΩÌïòÍ∏∞",
        "Ïö¥ÎèôÎèÑ Ìï¥Ïïº ÌïòÍ≥†‚Ä¶Îòê Î≠ê Ìï¥Ïïº ÌñàÎçîÎùº? ÌèâÏùºÏóê ÌïòÏßÄ Î™ªÌñàÎçò Í≤É Ï≤òÎ¶¨ÌïòÍ∏∞",
        "ÏµúÎåÄÌïú Îã§ÏñëÌïú Î∞©Ìñ•ÏúºÎ°ú ÏïÑÏù¥ÎîîÏñ¥Î•º Íµ¨ÏÉÅÌïòÍ≥† ÏûêÎ£å Ïä§ÌÅ¨Îû©Ìï¥ Í∞ÄÍ∏∞",
        "Í∞ÄÏû•  ÌòÑÏã§ÏÑ±ÏûàÍ≥† Ï¢ãÏùÄ ÏïÑÏù¥ÎîîÏñ¥Î•º ÎîîÎ≤®Î°≠Ìï¥ÏÑú Î¨∏ÏÑúÌôî Ìï¥Í∞ÄÍ∏∞",
        "ÏÑ±Ïã§ÌïúÍ≤å ÏµúÍ≥†! Îß°ÏùÄ ÏóÖÎ¨¥Î•º Íæ∏Ï§ÄÌïòÍ≤å ÏàòÌñâÌïú Ï†ê",
        "ÏÉàÎ°≠Í≤å Î∞∞Ïö∞Î©¥ÏÑú  Ï°∞ÏßÅÏóê Ï†ÅÏùëÌï¥ ÎÇòÍ∞ÄÎäî Ï†ê",
        "Î∞îÎ°ú  Ï†ÑÎã¨Í∞ÄÎä•Ìïú ÏûêÎ£åÎ•º Ï∑®Ìï©Ìï¥ÏÑú Î®ºÏ†Ä Ï†ÑÎã¨ÌïúÎã§.",
        "Î®ºÏ†Ä ÏñëÌï¥Î•º Íµ¨ÌïòÍ≥†, Î≥¥Í≥†ÏÑú ÎßàÎ¨¥Î¶¨ ÌõÑ ÌòëÏ°∞ÌïúÎã§.",
        "Î™®ÎëêÏùò ÏùòÍ≤¨ÏùÑ Ï∞®Î°ÄÎåÄÎ°ú Îì§Ïñ¥Î≥¥Í≥† Í≥ºÏó¥Îêú Î∂ÑÏúÑÍ∏∞Î•º Ï§ëÏû¨ÌïúÎã§.",
        "Í∞ÄÏû• Ìï©Î¶¨Ï†ÅÏù∏ ÏïàÏúºÎ°ú ÏùòÍ≤¨Ïù¥ Ìï©ÏπòÎê† Ïàò ÏûàÎèÑÎ°ù Ï†úÏïàÌïúÎã§.",
    ];
    let form_radio = [
        'P', 'J', 'F', 'T', 'S', 'N', 'F', 'T', 'P', 'J', 'N', 'S', 'S', 'N', 'P', 'J', 'F', 'T',
    ];

    let mut answers = vec![];

    println!("{}", title);
    let nick_name: String = read!();
    println!("");
    answers.push(format!("Nickname={}", nick_name));

    for i in 0..test_title.len() {
        loop {
            println!("\n\n{}", test_title.get(i).unwrap());
            println!("1) {}", form_label.get(2 * i).unwrap());
            println!("2) {}", form_label.get(2 * i + 1).unwrap());
            print!("> ");
            let input: usize = read!("{}");
            println!("\n");
            if input == 1 || input == 2 {
                answers.push(format!(
                    "Q{}={}",
                    i + 1,
                    form_radio.get((2 * i) + input - 1).unwrap()
                ));
                break;
            }
        }
    }

    let base_url = "https://www.hyundaijobfair2023.com";
    let client = reqwest::Client::new();
    let resp = client
        .post(format!("{base_url}/CodeTest/TestSave"))
        .body(format!("p={}", encrypt(&answers.join("&"))))
        .header(
            "Content-Type",
            "application/x-www-form-urlencoded; charset=UTF-8",
        )
        .send()
        .await
        .unwrap();

    let resp = resp.text().await.unwrap();

    let res: Value = serde_json::from_str(&resp).unwrap();
    if res["success"] == true {
        let href = &res["href"].as_str().unwrap().trim_matches('"');
        let resp = client
            .get(format!("{base_url}{href}"))
            .send()
            .await
            .unwrap();
        let data = resp.text().await.unwrap();
        let document = Html::parse_document(&data.as_str());
        let script_sel = Selector::parse("script").unwrap();
        let script_content: String = document
            .select(&script_sel)
            .nth(4)
            .unwrap()
            .text()
            .collect();

        let re = regex::Regex::new(r"`.+`").unwrap();
        let mut result = vec![];
        re.find_iter(&script_content).for_each(|x| {
            result.push(x.as_str().trim_matches('`'));
        });
        println!("{}\n", result.join(" "));

        let hash_sel = Selector::parse(".hash").unwrap();
        let hash_content = document
            .select(&hash_sel)
            .nth(0)
            .unwrap()
            .text()
            .map(|x| x.trim())
            .fold(vec![], |mut acc: Vec<_>, cur: &str| {
                acc.push(cur);
                acc
            })
            .join(" ");
        println!("{}", hash_content);

        let title_sel = Selector::parse("strong.title").unwrap();
        let title_content: String = document
            .select(&title_sel)
            .nth(0)
            .unwrap()
            .text()
            .collect::<String>()
            .split_whitespace()
            .map(|x| format!("{x} "))
            .collect();
        println!("");
        println!("‚òù {title_content}");

        let info_list_sel = Selector::parse(".info-list").unwrap();
        let info_list_content = document
            .select(&info_list_sel)
            .nth(0)
            .unwrap()
            .children()
            .filter_map(|child| ElementRef::wrap(child))
            .map(|e| {
                let desc = e
                    .text()
                    .collect::<String>()
                    .split_whitespace()
                    .collect::<Vec<_>>()
                    .join(" ");
                format!("- {desc}")
            })
            .collect::<Vec<_>>()
            .join("\n");
        println!("{}", info_list_content);

        let title_content: String = document
            .select(&title_sel)
            .nth(1)
            .unwrap()
            .text()
            .collect::<String>()
            .split_whitespace()
            .map(|x| format!("{x} "))
            .collect();

        println!("");
        println!("‚≠ê {title_content}");

        let intro_box_sel = Selector::parse(".intro-box").unwrap();
        let intro_box_content = document
            .select(&intro_box_sel)
            .nth(0)
            .unwrap()
            .children()
            .filter_map(|child| ElementRef::wrap(child))
            .map(|e| e.text().collect::<String>())
            .collect::<Vec<_>>()
            .join(" : ");

        println!("- {intro_box_content}");

        let description_sel = Selector::parse(".description").unwrap();
        let description_content = document
            .select(&description_sel)
            .nth(0)
            .unwrap()
            .text()
            .collect::<String>()
            .split_whitespace()
            .collect::<Vec<_>>()
            .join(" ");
        println!("  {}", description_content);

        let title_content: String = document
            .select(&title_sel)
            .nth(2)
            .unwrap()
            .text()
            .collect::<String>()
            .split_whitespace()
            .map(|x| format!("{x} "))
            .collect();
        println!("");
        println!("ü§ù {title_content}");

        let intro_box_content = document
            .select(&intro_box_sel)
            .nth(1)
            .unwrap()
            .children()
            .filter_map(|x| ElementRef::wrap(x))
            .skip(1)
            .peekable()
            .peek()
            .unwrap()
            .children()
            .filter_map(|c| ElementRef::wrap(c))
            .map(|c| c.text().collect::<String>())
            .collect::<Vec<_>>()
            .join(" : ");

        println!("{intro_box_content}");
        let description_content = document
            .select(&description_sel)
            .nth(1)
            .unwrap()
            .text()
            .collect::<String>()
            .split_whitespace()
            .collect::<Vec<_>>()
            .join(" ");
        println!("  {}", description_content);
    }
}
